#!/bin/bash

#------------------------------------------------------------------------------
# Copyright (c) 2019, tarlety@gmail.com
#
# Zerus Scripting Standard v0.3.0
#
# This standard defines script state management framework.
# Following this framework, you can manage app states in a consistent way.
#
# Environments:
#
#    SECRET	Where to keep secrets.
#    CONFIG	Where to keep configurations.
#    STORE	Where to keep persistent data.
#
# Commands:
#
#    env                Display all runtime environments, configurables, and required tools.
#    config ...         Set configurations by this command.
#    secret-create      Create new secrets.
#    state [config/secret/data] [list/save/load] [state-name]
#                       App state type includes config, secret, and data.
#                       The state can be saved or loaded.
#                       Default state type is all states and default action is "list".
#
# Scnario:
#
#    1. First, use "<scirptname> env" to confirm the state is clean.
#    2. Then, use "<scriptname> config" to know how many configurations you have to set.
#    3. Then, use "<scriptname> secret-create" to create secret files.
#    4. Then, use "<scriptname> env" again to confirm the state is what you want.


#------------------------------------------------------------------------------
# Environments:

SCRIPTNAME=app-owncloud-ctrl
APPNAME=owncloud

SECRET=${SECRET:-".secret/$SCRIPTNAME"}
CONFIG=${CONFIG:-".config/$SCRIPTNAME"}

DEFAULT_STORE=${STORE:-".store/$SCRIPTNAME"}
DEFAULT_BASE_CONFIG=nop
DEFAULT_BASE_SECRET=nop
DEFAULT_BASE_DATA=nop
DEFAULT_KUBEAPPS_PLATFORM_DIR=../kube_apps_platform
DEFAULT_APP_BASEDIR=/data/$APPNAME
DEFAULT_GPGKEYNAME=$USERNAME

STORE=`cat $CONFIG/store 2>/dev/null`
BASE_CONFIG=`cat $CONFIG/base_config 2>/dev/null`
BASE_SECRET=`cat $CONFIG/base_secret 2>/dev/null`
BASE_DATA=`cat $CONFIG/base_data 2>/dev/null`
KUBEAPPS_PLATFORM_DIR=`cat $CONFIG/kubeapps_platform_dir 2>/dev/null`
APP_BASEDIR=`cat $CONFIG/app_basedir 2>/dev/null`
GPGKEYNAME=`cat $CONFIG/gpgkeyname 2>/dev/null`

APP_BACKUP=$APP_BASEDIR/backup
APP_DATA=$APP_BASEDIR/data

#------------------------------------------------------------------------------
# Commands

case $1 in
	"env")
		echo =========================================================================
		echo "## SCRIPT NAME: $SCRIPTNAME"
		echo - STORE: $STORE
		echo - SECRET: $SECRET
		echo - CONFIG: $CONFIG
		echo - KUBEAPPS_PLATFORM_DIR: $KUBEAPPS_PLATFORM_DIR
		echo - APP_BASEDIR: $APP_BASEDIR
		echo - GPGKEYNAME: $GPGKEYNAME $(gpg -k $GPGKEYNAME 2>/dev/null | sed -n '2p' | xargs)
		echo "## REQUIREMENT:"
		echo - kubectl: $(which kubectl)
		echo - gpg: $(which gpg)
		echo - tar: $(which tar)
		echo - gzip: $(which gzip)
		echo - gunzip: $(which gunzip)
		echo - colordiff: $(which colordiff)
		echo =========================================================================
		;;
	"config")
		shift
		mkdir -p ${CONFIG}
		case $1 in
			"store")
				shift
				STORE=${1:-$DEFAULT_STORE}
				echo $STORE > ${CONFIG}/store
				;;
			"kubeapps_platform_dir")
				shift
				KUBEAPPS_PLATFORM_DIR=${1:-$DEFAULT_KUBEAPPS_PLATFORM_DIR}
				echo $KUBEAPPS_PLATFORM_DIR > ${CONFIG}/kubeapps_platform_dir
				;;
			"app_base_dir")
				shift
				APP_BASEDIR=${1:-$DEFAULT_APP_BASEDIR}
				echo $APP_BASEDIR > ${CONFIG}/app_basedir
				;;
			"gpg")
				shift
				GPGKEYNAME=${1:-$DEFAULT_GPGKEYNAME}
				echo $GPGKEYNAME >  ${CONFIG}/gpgkeyname
				;;
			*)
				echo $(basename $0) config "<config_name>" "<config_value>"
				echo ""
				echo "config names:"
				echo "	store			The local repository for state."
				echo "				Ex: $(basename $0) config store $DEFAULT_STORE"
				echo "	kubeapps_platform_dir	Where the kube_apps_platform scripts are installed."
				echo "				Ex: $(basename $0) config kubeapps_platform_dir $DEFAULT_KUBEAPPS_PLATFORM_DIR"
				echo "	app_base_dir		The base directory on node, where the app stores data and backups."
				echo "				Ex: $(basename $0) config app_base_dir $DEFAULT_APP_BASEDIR"
				echo "	gpg			the gpg key used to encrypt data, like secrets."
				echo "				Ex: $(basename $0) config gpg $DEFAULT_GPGKEYNAME"
				;;
		esac
		$0 env > ${CONFIG}/env
		;;
	"secret-create")
		echo "SECRET not support."
		;;
	"state")
		shift
		ACTION=$1
		TYPE=$2
		STATENAME=$3

		mkdir -p ${STORE}/state ${STORE}/data
		case $ACTION in
			"save")
				if [ "$TYPE" == "config" -o "$TYPE" == "" ]; then
					$0 env > ${CONFIG}/env
					tar -zcf ${STORE}/state/$STATENAME-${APPNAME}-config.tgz ${CONFIG}
					echo $STATENAME > ${CONFIG}/base_config
				fi
				if [ "$TYPE" == "secret" -o "$TYPE" == "" ]; then
					mv -f ${STORE}/state/$STATENAME-$APPNAME-secret.enc ${STORE}/state/$STATENAME-bak-$APPNAME-secret.enc 2>/dev/null
					kubectl get secrets -n app-$APPNAME passwords -o yaml | gpg -ear ${GPGKEYNAME} -o ${STORE}/state/$STATENAME-$APPNAME-secret.enc
					echo $STATENAME > ${CONFIG}/base_secret
				fi
				if [ "$TYPE" == "data" -o "$TYPE" == "" ]; then
					cd $KUBEAPPS_PLATFORM_DIR
					./do ssh "sudo tar -C $APP_BASEDIR -c ." | gzip - | gpg -ear ${GPGKEYNAME} -o $STORE/data/$STATENAME-$APPNAME-data.tgz.enc
					cd -
					echo $STATENAME > ${CONFIG}/base_data
				fi
				;;
			"load")
				if [ "$TYPE" == "config" -o "$TYPE" == "" ]; then
					[ -e ${STORE}/state/$STATENAME-${APPNAME}-config.tgz ] && tar -zxf ${STORE}/state/$STATENAME-${APPNAME}-config.tgz
					echo $STATENAME > ${CONFIG}/base_config
				fi
				if [ "$TYPE" == "secret" -o "$TYPE" == "" ]; then
					if [ -e ${STORE}/state/$STATENAME-$APPNAME-secret.enc ]
					then
						kubectl delete secret passwords -n app-$APPNAME
						gpg -d ${STORE}/state/$STATENAME-$APPNAME-secret.enc | kubectl apply -f -
					fi
					echo $STATENAME > ${CONFIG}/base_secret
				fi
				if [ "$TYPE" == "data" -o "$TYPE" == "" ]; then
					cd $KUBEAPPS_PLATFORM_DIR
					./do ssh "sudo rm -rf $APP_BASEDIR ; sudo mkdir -p $APP_BASEDIR"
					gpg -d ${STORE}/data/$STATENAME-$APPNAME-data.tgz.enc | gunzip -c - | ./do ssh "sudo tar -C $APP_BASEDIR -xf -"
					cd -
					echo $STATENAME > ${CONFIG}/base_data
				fi
				;;
			"list"|*)
				RED='\033[0;31m'
				NC='\033[0m'
				if [ "$TYPE" == "config" -o "$TYPE" == "" ]; then
					echo -e "${RED}## CONFIG: ${BASE_CONFIG}${NC}"
					cd ${STORE}/state
					ls *-$APPNAME-config.tgz 2>/dev/null | sed "s/-${APPNAME}-config.tgz//"
					cd - &>/dev/null
				fi
				if [ "$TYPE" == "secret" -o "$TYPE" == "" ]; then
					echo -e "${RED}## SECRET: ${BASE_SECRET}${NC}"
					cd ${STORE}/state
					ls *-$APPNAME-secret.enc 2>/dev/null | sed "s/-${APPNAME}-secret.enc//"
					cd - &>/dev/null
				fi
				if [ "$TYPE" == "data" -o "$TYPE" == "" ]; then
					echo -e "${RED}## DATA: ${BASE_DATA}${NC}"
					cd ${STORE}/data
					ls *-${APPNAME}-data.tgz.enc 2>/dev/null | sed "s/-${APPNAME}-data.tgz.enc//"
					cd - &>/dev/null
				fi

				echo -e "${RED}## ENV: STATE | CURRENT${NC}"
				$0 env | colordiff -y --suppress-common-lines ${CONFIG}/env -
				;;
		esac
		;;
	"init")
		cd $KUBEAPPS_PLATFORM_DIR
		./do ssh "sudo mkdir -p $APP_BACKUP ; sudo mkdir -p $APP_DATA"
		./do app $APPNAME init
		./do store create app-$APPNAME cold 1000Gi $APP_BACKUP backup
		./do store create app-$APPNAME normal 100Gi $APP_DATA data
		./do app $APPNAME preflight
		cd -
		;;
	"on")
		cd $KUBEAPPS_PLATFORM_DIR
		./do app $APPNAME on
		cd -
		;;
	"off")
		cd $KUBEAPPS_PLATFORM_DIR
		./do app $APPNAME off
		cd -
		;;
	"clean")
		cd $KUBEAPPS_PLATFORM_DIR
		./do app $APPNAME clean
		./do store delete app-$APPNAME cold
		./do store delete app-$APPNAME normal
		cd -
		;;
	*)
		echo $(basename $0) env
		echo $(basename $0) config ...
		echo $(basename $0) secret-create
		echo $(basename $0) "state [list/save/load] [config/secret/data] [state_name, ex: date-stage-env]"
		echo $(basename $0) init/on/off/clean
		;;
esac

