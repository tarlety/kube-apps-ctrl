#!/bin/bash

#==============================================================================
# Copyright (c) 2019, tarlety@gmail.com
#
# Zerus Scripting Standard v0.5.1
#
# This standard defines script state management framework.
# Following this framework, you can manage app states in a consistent way.
#
# Environments:
#
#    ZSS_STORE	The store location to keep config/secret/stte/data.
#
# Commands:
#
#    env                Display all runtime environments, configurables, and required tools.
#    config ...         Set configurations by this command.
#    secret-create      Create new secrets.
#    state [config/secret/data] [list/save/load] [state-name]
#                       App state type includes config, secret, and data.
#                       The state can be saved or loaded.
#                       Default state type is all states and default action is "list".
#
# Store Structure:
#
#   - store/projectname/appname/config
#   - store/projectname/appname/secret
#     - *.env
#   - store/projectname/appname/data
#     - (container volume)
#   - store/projectname/appname/state
#     - *-config.tgz
#     - *-secret.tgz.enc
#     - *-data.tgz.enc
#   - store/projectname/appname/others...
#
# Scnario:
#
#    1. First, use "<app> env" to check current configurations.
#    2. Then, use "<app> config" to set proper configurations based on runtime environments.
#    3. Then, use "<app> secret-create" to create secret based on authentications.
#    4. Then, use "<app> state" to save config and secret.
#
# Changelog:
#
#    v0.5.0:
#       - new designed Store Structure
#       - framework integrated: app-related sections are bounded by AppImplementing
#       - certificate as secret files shall be encrypted

#==============================================================================
# Environments:

VERSION=0.5.2
PROJECTNAME=kube-apps-ctrl
APPNAME=$(echo $(basename $0) | sed -e 's/app-\(.*\)-ctrl/\1/g')
STORE=${ZSS_STORE:-"${PWD}/.store"}/${PROJECTNAME}/${APPNAME}
SECRET=${SECRET:-"${STORE}/secret"}
CONFIG=${CONFIG:-"${STORE}/config"}
DATA=${DATA:-"${STORE}/data"}
STATE=${STATE:-"${STORE}/state"}

BASE_CONFIG=`cat ${CONFIG}/base_config 2>/dev/null`
BASE_SECRET=`cat ${CONFIG}/base_secret 2>/dev/null`
BASE_DATA=`cat ${CONFIG}/base_data 2>/dev/null`
SALT=${SECRET}/salt

DEFAULT_GPGKEY=${USERNAME}

# AppImplementing Section: configs
#------------------------------------------------------------------------------
CONFIGKEYS="kubeapps_platform_dir app_basedir node_ports"
declare -A CONFIG_DESCRIPTIONS
CONFIG_DESCRIPTIONS=( \
	["kubeapps_platform_dir"]="Where the kube_apps_platform scripts are installed." \
	["app_basedir"]="The base directory on node, where the app stores data and backups." \
	["node_ports"]="The ports exposed on worker node." \
	)

DEFAULT_KUBEAPPS_PLATFORM_DIR=../kube_apps_platform
DEFAULT_APP_BASEDIR=/data/${APPNAME}
DEFAULT_NODE_PORTS=32767

KUBEAPPS_PLATFORM_DIR=`cat ${CONFIG}/kubeapps_platform_dir 2>/dev/null`
APP_BASEDIR=`cat ${CONFIG}/app_basedir 2>/dev/null`
NODE_PORTS=`cat ${CONFIG}/node_ports 2>/dev/null`

APP_BACKUP=${APP_BASEDIR}/backup
APP_DATA=${APP_BASEDIR}/data
#------------------------------------------------------------------------------

GPGKEY=`cat ${CONFIG}/gpgkey 2>/dev/null`

eval export $(echo ${CONFIGKEYS} | tr '[:lower:]' '[:upper:]')

#==============================================================================
# Commands

case $1 in
	"version")
		echo ${VERSION}
		;;
	"env")
		echo =========================================================================
		echo "## NAME: ${PROJECTNAME}/${APPNAME}"
		echo - VERSION: ${VERSION}
		echo - STORE: ${STORE}
		echo - SECRET: $(echo $(cat $SALT 2>/dev/null) $(cat ${SECRET}/* | sha256sum 2>/dev/null) | sha1sum | cut -c1-8)
		for KEY in ${CONFIGKEYS}
		do
			KEY=$(echo ${KEY} | tr '[:lower:]' '[:upper:]')
			eval echo - ${KEY}: \${${KEY}}
		done
		echo - GPGKEY: ${GPGKEY} $(gpg -k ${GPGKEY} 2>/dev/null | sed -n '2p' | xargs)
		echo "## REQUIREMENT:"
		# AppImplementing Section: requirement
		#------------------------------------------------------------------------------
		echo - kubectl: $(which kubectl)
		echo - gzip: $(which gzip)
		echo - gunzip: $(which gunzip)
		#------------------------------------------------------------------------------
		echo - gpg: $(which gpg)
		echo - tar: $(which tar)
		echo - colordiff: $(which colordiff)
		echo =========================================================================
		;;
	"config")
		shift
		mkdir -p ${CONFIG}
		case $1 in
			# AppImplementing Section: config cases
			#------------------------------------------------------------------------------
			"kubeapps_platform_dir"|"app_basedir"|"node_ports")
			#------------------------------------------------------------------------------
				KEY=$1
				VALUE_VAR=$(echo DEFAULT_${KEY} | tr '[:lower:]' '[:upper:]')
				VALUE=${2:-$(eval echo \${${VALUE_VAR}})}
				eval echo ${VALUE} > ${CONFIG}/${KEY}
				;;
			"gpgkey")
				shift
				GPGKEY=${1:-${DEFAULT_GPGKEY}}
				echo ${GPGKEY} >  ${CONFIG}/gpgkey
				;;
			*)
				echo "Usage: $(basename $0) config <key> <value>"
				echo ""
				echo "Config keys:"
				echo ""
				for KEY in ${CONFIGKEYS}
				do
					VALUE_VAR=$(echo DEFAULT_${KEY} | tr '[:lower:]' '[:upper:]')
					VALUE=${2:-$(eval echo \${${VALUE_VAR}})}
					DESCRIPTION=${CONFIG_DESCRIPTIONS[${KEY}]}
					echo " ${KEY}: ${DESCRIPTION}"
					echo "	Ex: $(basename $0) config ${KEY} ${VALUE}"
				done
				echo " gpgkey: configure which gpg key to use."
				echo "	Ex: $(basename $0) config gpgkey ${DEFAULT_GPGKEY}"
				;;
		esac
		;;
	"secret-create")
		shift
		mkdir -p ${SECRET}
		chmod -R go-rwx ${SECRET}

		# AppImplementing Section: secret-create
		#------------------------------------------------------------------------------
		# nop
		#------------------------------------------------------------------------------

		gpg --gen-random --armor 2 16 | base64 | cut -c1-16 > ${SALT}
		;;
	"state")
		shift
		ACTION=$1
		TYPE=$2
		STATENAME=$3

		mkdir -p ${STORE}/state ${STORE}/data
		case ${ACTION} in
			"save")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_config
					$0 env > ${CONFIG}/env
					cd ${CONFIG}
					tar -zcf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz .
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_secret
					mv -f ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ${STORE}/state/${STATENAME}-bak-${APPNAME}-secret.tgz.enc &>/dev/null
					cd ${SECRET}
					tar -zc . | \
						gpg -ear ${GPGKEY} -o ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					# AppImplementing Section: data save
					#------------------------------------------------------------------------------
					echo ${STATENAME} > ${CONFIG}/base_data
					cd ${KUBEAPPS_PLATFORM_DIR}
					./zss0 ssh "sudo tar -C ${APP_BASEDIR} -c ." | \
						gzip - | \
						gpg -ear ${GPGKEY} -o ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc
					cd -
					#------------------------------------------------------------------------------
				fi
				;;
			"load")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz ]
					then
						cd ${CONFIG}
						tar -zxf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_config
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ]
					then
						cd ${SECRET}
						gpg -d ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc | tar xz
						# AppImplementing Section: secret load
						#------------------------------------------------------------------------------
						kubectl delete secret passwords -n app-${APPNAME}
						gpg -d ${SECRET}/passwords.enc | tar xz -O | kubectl apply -f -
						#------------------------------------------------------------------------------
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_secret
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					# AppImplementing Section: data load
					#------------------------------------------------------------------------------
					cd ${KUBEAPPS_PLATFORM_DIR}
					./zss0 ssh "sudo rm -rf ${APP_BASEDIR} ; sudo mkdir -p ${APP_BASEDIR}"
					gpg -d ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc | gunzip -c - | ./do ssh "sudo tar -C ${APP_BASEDIR} -xf -"
					cd -
					echo ${STATENAME} > ${CONFIG}/base_data
					#------------------------------------------------------------------------------
				fi
				;;
			"list"|*)
				HC='\033[0;93m'
				NC='\033[0m'
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## CONFIG: ${BASE_CONFIG}${NC}"
					cd ${STATE}
					ls *-${APPNAME}-config.tgz 2>/dev/null | sed "s/\(.*\)-${APPNAME}-config.tgz/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## SECRET: ${BASE_SECRET}${NC}"
					cd ${STATE}
					ls *-${APPNAME}-secret.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-secret.tgz.enc/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## DATA  : ${BASE_DATA}${NC}"
					cd ${STATE}
					ls *-${APPNAME}-data.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-data.tgz.enc/           \1/"
					cd - &>/dev/null
				fi

				echo -e "${HC}## ENV   : STATE                                              | CURRENT${NC}"
				$0 env | colordiff -y --suppress-common-lines ${CONFIG}/env -
				;;
		esac
		;;
	# AppImplementing Section: commands
	#------------------------------------------------------------------------------
	"init")
		cd ${KUBEAPPS_PLATFORM_DIR}
		./zss0 ssh "sudo mkdir -p ${APP_BACKUP} ; sudo mkdir -p ${APP_DATA}"
		./zss0 app ${APPNAME} init
		./zss0 store create app-${APPNAME} cold 1000Gi ${APP_BACKUP} backup
		./zss0 store create app-${APPNAME} normal 100Gi ${APP_DATA} data
		./zss0 app ${APPNAME} preflight
		kubectl get secrets -n app-${APPNAME} passwords -o yaml | \
			gpg -ear ${GPGKEY} -o ${SECRET}/passwords.enc
		cd -
		;;
	"on")
		cd ${KUBEAPPS_PLATFORM_DIR}
		./zss0 app ${APPNAME} on
		cd -
		;;
	"off")
		cd ${KUBEAPPS_PLATFORM_DIR}
		./zss0 app ${APPNAME} off
		cd -
		;;
	"clean")
		cd ${KUBEAPPS_PLATFORM_DIR}
		./zss0 app ${APPNAME} clean
		./zss0 store delete app-${APPNAME} cold
		./zss0 store delete app-${APPNAME} normal
		cd -
		;;
	#------------------------------------------------------------------------------
	*)
		echo $(basename $0) version
		echo $(basename $0) env
		echo $(basename $0) config ...
		echo $(basename $0) secret-create
		echo $(basename $0) "state [list/save/load] [config/secret/data] [state_name, ex: date-stage-env]"
		# AppImplementing Section: usage
		#------------------------------------------------------------------------------
		echo $(basename $0) init/on/off/clean
		#------------------------------------------------------------------------------
		;;
esac

